conditionalPanel(
condition = "input.Input_Analyses_MultiCompaConfigs_ChoixVitesses == 'perso'",
numericInput("Input_Analyses_MultiCompaConfigs_vitesse", label =h4("vitesse en km/h"), value = 50, min = 5, max = 130)
)
)
)
,
pickerInput(
inputId = "Input_Analyses_MultiCompaConfigs_TypeGraph",
label = "Type de graphique :",
width = 400,
choices = c("Polaire" = "scatterpolar",
"Barre" = "bar")
)
,
conditionalPanel(
condition = "input.Input_Analyses_MultiCompaConfigs_TypeGraph == 'scatterpolar'",
withSpinner(plotlyOutput("GRAPH_MultiCompaConfigs_scatterpolar",height = "600px"))
),
conditionalPanel(
condition = "input.Input_Analyses_MultiCompaConfigs_TypeGraph == 'bar'",
withSpinner(plotlyOutput("GRAPH_MultiCompaConfigs_bar",height = "600px"))
),
downloadButton("download_MultiCompaConfigs", "Télécharger les données", class = "butt1")
# ) # fin du conditionalPanel
) # fin du tabItem 'MultiCompaConfigs'
,
tabItem(tabName = "MultiACVdetail", ## Onglet MultiACVdetail ####
h4("Analyse détaillée des contributions")
,
uiOutput("MultiACVdetail_choix_calcul"),
uiOutput("MultiACVdetail_Indicateurs")
,
fluidRow(
column(width = 6, radioGroupButtons(inputId = "Input_Analyses_MultiACVdetail_ChoixVitesses",
label = "Vitesses de circulation",
choices = c("Réseau" = "reseau","Lente" = "lent", "Moyenne" = "moyen",
"Rapide" = "rapide", "Très rapide" = "très.rapide",
"Personnalisée" = "perso"),
selected = "moyen",
status = "info"
),
conditionalPanel(
condition = "input.Input_Analyses_MultiACVdetail_ChoixVitesses == 'reseau'",
span(textOutput("MultiACVdetail_vitessereseau"),style="font-size:1.4em")
),
conditionalPanel(
condition = "input.Input_Analyses_MultiACVdetail_ChoixVitesses == 'lent'",
h4("vitesse moyenne : 32 km/h")
),
conditionalPanel(
condition = "input.Input_Analyses_MultiACVdetail_ChoixVitesses == 'moyen'",
h4("vitesse moyenne : 51 km/h")
),
conditionalPanel(
condition = "input.Input_Analyses_MultiACVdetail_ChoixVitesses == 'rapide'",
h4("vitesse moyenne : 72 km/h")
),
conditionalPanel(
condition = "input.Input_Analyses_MultiACVdetail_ChoixVitesses == 'très.rapide'",
h4("vitesse moyenne : 106 km/h")
),
conditionalPanel(
condition = "input.Input_Analyses_MultiACVdetail_ChoixVitesses == 'perso'",
numericInput("Input_Analyses_MultiACVdetail_vitesse", label =h4("vitesse en km/h"), value = 50, min = 5, max = 130)
)
)
)
,
fluidRow(
column(width = 10, offset = 1,
checkboxGroupButtons(
inputId = "MultiACVdetail_Phases",
label = "Ajouter du détail pour :",
choices = c("Emissions directes" = "Gaz",
"Types de carburants" = "Carburants",
"Parties du véhicule" = "Vehicules",
"Types d'infrastructures" = "Infra"),
justified = TRUE,
checkIcon = list(
yes = icon("ok",
lib = "glyphicon"))
)
)
)
,
withSpinner(plotlyOutput("GRAPH_MultiACVdetail",height = "600px")),
downloadButton("download_MultiACVdetail", "Télécharger les données", class = "butt1")
) # fin du tabItem 'MultiACVdetail'
,
tabItem(tabName = "EmissionsDirectes", ## Onglet EmissionsDirectes ####
h4("Analyse des émissions directes et des consommations")
,
uiOutput("EmissionsDirectes_choix_calcul"),
boxPlus(title = "Evolution avec la vitesse de circulation",
width = NULL,
closable = FALSE,
collapsible = TRUE,
collapsed = FALSE,
enable_label = TRUE,
solidHeader = FALSE,
withSpinner(plotlyOutput("GRAPH_EmissionsDirectes_vitesse",height = "600px")),
downloadButton("download_EmissionsDirectes", "Télécharger les données", class = "butt1")
)
,
boxPlus(title = "Tableau d'émissions et de consommations",
width = NULL,
closable = FALSE,
collapsible = TRUE,
collapsed = FALSE,
enable_label = TRUE,
solidHeader = FALSE,
column(width = 3,
radioGroupButtons(inputId = "Input_Analyses_EmissionsDirectes_ChoixVitesses",
label = "Vitesses de circulation",
choices = c("Réseau" = "reseau","Lente" = "lent", "Moyenne" = "moyen",
"Rapide" = "rapide", "Très rapide" = "très.rapide",
"Personnalisée" = "perso"),
selected = "moyen",
status = "info",
direction = "vertical"
),
conditionalPanel(
condition = "input.Input_Analyses_EmissionsDirectes_ChoixVitesses == 'reseau'",
span(textOutput("EmissionsDirectes_vitessereseau"),style="font-size:1.4em")
),
conditionalPanel(
condition = "input.Input_Analyses_EmissionsDirectes_ChoixVitesses == 'lent'",
h4("vitesse moyenne : 32 km/h")
),
conditionalPanel(
condition = "input.Input_Analyses_EmissionsDirectes_ChoixVitesses == 'moyen'",
h4("vitesse moyenne : 51 km/h")
),
conditionalPanel(
condition = "input.Input_Analyses_EmissionsDirectes_ChoixVitesses == 'rapide'",
h4("vitesse moyenne : 72 km/h")
),
conditionalPanel(
condition = "input.Input_Analyses_EmissionsDirectes_ChoixVitesses == 'très.rapide'",
h4("vitesse moyenne : 106 km/h")
),
conditionalPanel(
condition = "input.Input_Analyses_EmissionsDirectes_ChoixVitesses == 'perso'",
numericInput("Input_Analyses_EmissionsDirectes_vitesse", label =h4("vitesse en km/h"), value = 50, min = 5, max = 130)
)
),
column(width = 8,
dataTableOutput("DT_EmissionsDirectes_gaz"),
dataTableOutput("DT_EmissionsDirectes_carburants")
)
)
,
boxPlus(title = "Comparaison de véhicules",
width = NULL,
closable = FALSE,
collapsible = TRUE,
collapsed = FALSE,
enable_label = TRUE,
solidHeader = FALSE,
fluidRow(
column(width = 3,
pickerInput(
inputId = "Input_Analyses_EmissionsDirectes_MotoEuroSegment",
label = "Discrétiser par :",
width = 200,
choices = c("Motorisations" = "Moto",
"Normes Euro" = "Euro",
"Segments de puissance" = "Segment"),
selected = "Moto",
multiple = TRUE,
options = list(
style = "btn-success")
)
,
radioGroupButtons(inputId = "Input_Analyses_EmissionsDirectes_ChoixVitesses2",
label = "Vitesses de circulation",
choices = c("Réseau" = "reseau","Lente" = "lent", "Moyenne" = "moyen",
"Rapide" = "rapide", "Très rapide" = "très.rapide",
"Personnalisée" = "perso"),
selected = "moyen",
status = "info",
direction = "vertical"
)
,
conditionalPanel(
condition = "input.Input_Analyses_EmissionsDirectes_ChoixVitesses2 == 'reseau'",
span(textOutput("EmissionsDirectes_vitessereseau2"),style="font-size:1.4em")
)
,
conditionalPanel(
condition = "input.Input_Analyses_EmissionsDirectes_ChoixVitesses2 == 'lent'",
h4("vitesse moyenne : 32 km/h")
)
,
conditionalPanel(
condition = "input.Input_Analyses_EmissionsDirectes_ChoixVitesses2 == 'moyen'",
h4("vitesse moyenne : 51 km/h")
)
,
conditionalPanel(
condition = "input.Input_Analyses_EmissionsDirectes_ChoixVitesses2 == 'rapide'",
h4("vitesse moyenne : 72 km/h")
),
conditionalPanel(
condition = "input.Input_Analyses_EmissionsDirectes_ChoixVitesses2 == 'très.rapide'",
h4("vitesse moyenne : 106 km/h")
),
conditionalPanel(
condition = "input.Input_Analyses_EmissionsDirectes_ChoixVitesses2 == 'perso'",
numericInput("Input_Analyses_EmissionsDirectes_vitesse2", label =h4("vitesse en km/h"), value = 50, min = 5, max = 130)
)
)
,
column(width = 8,
radioGroupButtons(inputId = "Input_Analyses_EmissionsDirectes_gazcarb",
label = NULL,
choices = c("Emissions de gaz" = "Gaz",
"Consommations de carburant" = "Carburant"),
selected = "Gaz",
status = "info"
)
,
dataTableOutput("DT_EmissionsDirectes_veh")
)
)
)
) # fin du tabItem 'EmissionsDirectes'
,
tabItem(tabName = "Export", ## Onglet Export ####
h4("Export, élaboration en cours")
# ,
#
# dataTableOutput("VISU_LISTEREACT_Impacts_parc_1"),
# dataTableOutput("VISU_LISTEREACT_Impacts_parc_2"),
# dataTableOutput("VISU_LISTEREACT_Impacts_parc_3"),
# textOutput("VISU_LISTEREACT_Impacts_parc_TEXTE"),
#
# br(),br(),
# h5("VISU_Emis_conso"),
# dataTableOutput("VISU_Emis_conso"),
# h5("VISU_Emis_conso_unitaire"),
# dataTableOutput("VISU_Emis_conso_unitaire"),
# h5("VISU_Impacts_unitaire"),
# dataTableOutput("VISU_Impacts_unitaire"),
# h5("VISU_Emis_conso_parc"),
# dataTableOutput("VISU_Emis_conso_parc"),
# h5("VISU_Impacts_parc"),
# dataTableOutput("VISU_Impacts_parc"),
# h5("VISU_tri_direct_unitaire"),
# dataTableOutput("VISU_tri_direct_unitaire"),
# h5("VISU_tri_direct_parc"),
# dataTableOutput("VISU_tri_direct_parc")
) # fin du tabItem 'Export'
) # fin du tabItems
) # fin du dashboardBody
) # fin du dashboardPagePlus
) # fin du tabPanel "Analyses"
,
# --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
# --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
# --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
tabPanel("A propos", # TabPanel "A propos" ####
style = "padding-top: 100px;",
icon = icon("envelope"),
fluidRow(
column(width = 10, offset=1,
boxPlus(
title = div(icon("book"),"Manuel"),
sidebar_icon = icon("envelope"),
closable = FALSE,
width = NULL,
enable_label = TRUE,
solidHeader = FALSE,
collapsible = TRUE,
collapsed = TRUE,
background = "blue",
includeMarkdown("www/Manuel.md")
)
))
,
fluidRow(
column(width = 10, offset=1,
boxPlus(
title = div(icon("book"),"Méthodologie"),
sidebar_icon = icon("envelope"),
closable = FALSE,
width = NULL,
enable_label = TRUE,
solidHeader = FALSE,
collapsible = TRUE,
collapsed = TRUE,
background = "blue",
includeMarkdown("www/Method.md")
)
))
,
fluidRow(
column(width = 10, offset=1,
boxPlus(
title = div(icon("envelope"),"Mentions légales"),
sidebar_icon = icon("envelope"),
closable = FALSE,
width = NULL,
enable_label = TRUE,
solidHeader = FALSE,
collapsible = TRUE,
collapsed = TRUE,
background = "blue",
includeMarkdown("www/mentions_legales.md")
)
))
,
fluidRow(
column(width = 10, offset=1,
widgetUserBox(
title = "Contact",
width = 12,
#height = 20000,
type = 2,
boxToolSize = "sm",
src = "Cyrille Francois-portrait.png",
color = "yellow",
includeMarkdown("www/Cyrille.md")
)
))
) # fin du tabPanel "A propos"
# Footer  ---------------------------
,
footer = div("Copyright 2020 © - UGE    ",
style="
text-align: center;
padding-top: 20px;
box-shadow: 0px -5px 10px #d2d2d2;
height: 50px;
margin-top: 20px;
")
)
library(shinydashboard)
library(shinycssloaders)
library(shinyWidgets)
library(shinydashboardPlus)
library(shiny)
source("libraries.R")
source("functions_Config.R")
# source("functions_analyses.R")
source("Chargement_data.R")
runApp()
library(shinydashboard)
library(shinycssloaders)
library(shinyWidgets)
library(shinydashboardPlus)
library(shiny)
source("libraries.R")
source("functions_Config.R")
# source("functions_analyses.R")
source("Chargement_data.R")
runApp()
runApp()
View(liste_impacts_ACV)
runApp()
dim(c(0))
is.null(dim(c(0)))
is.null(dim(c(0,1)))
is.null(dim(c(0,2,1)))
is.null(dim(matrix(1:4,nrow = 2)))
dim(matrix(1:4,nrow = 2))
runApp()
library(shinydashboard)
library(shinycssloaders)
library(shinyWidgets)
library(shinydashboardPlus)
library(shiny)
source("libraries.R")
source("functions_Config.R")
# source("functions_analyses.R")
source("Chargement_data.R")
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
warnings()
warning()
warnings()
runApp()
View(liste_impacts_ACV)
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinydashboard)
library(shinycssloaders)
library(shinyWidgets)
library(shinydashboardPlus)
library(shiny)
source("libraries.R")
source("functions_Config.R")
# source("functions_analyses.R")
source("Chargement_data.R")
runApp()
runApp()
runApp()
runApp()
runApp()
print(aero)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
View(liste_impacts_ACV)
runApp()
View(ACV_carburants)
View(ACV_carburants)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
TTTT <- 1:6
PPPP <- 4:10
JJJJ <- 2:8
TTTT[which(TTTT %in% PPPP & TTTT %in% JJJJ)]
intersect(TTTt,JJJJ,PPPP)
intersect(TTTT,JJJJ,PPPP)
Reduce(intersect,list(TTTT,PPPP,JJJJ))
View(liste_impacts_ACV)
runApp()
shiny::runApp()
View(liste_impacts_ACV)
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
license()
require(dplyr)
licences()
license()
library(shiny)
shiny::runApp()
#Chargement des donnees brutes pre-traitees
load("data/data_ini.RData")
shiny::runApp()
runApp()
runApp()
runApp()
library(icons)
install.packages("remotes")
remotes::install_github("mitchelloharawild/icons")
library(icons)
download_fontawesome()
library(icons)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages(c("backports", "BH", "BiocManager", "bit", "bit64", "broom", "callr", "car", "cli", "clipr", "colorspace", "corrplot", "cpp11", "crosstalk", "curl", "data.table", "desc", "digest", "dplyr", "DT", "e1071", "ellipsis", "FactoMineR", "fansi", "farver", "fastmap", "forcats", "forecast", "Formula", "future", "generics", "ggplot2", "ggrepel", "glue", "haven", "hdf5r", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "imp4p", "isoband", "JavaGD", "jpeg", "jsonlite", "labeling", "labelled", "later", "lava", "lifecycle", "lme4", "lmtest", "lubridate", "maptools", "MatrixModels", "matrixStats", "mice", "mime", "missMDA", "multcomp", "mvtnorm", "nnet", "openssl", "openxlsx", "pbkrtest", "pillar", "pkgbuild", "pkgload", "plotly", "processx", "ps", "quantmod", "quantreg", "questionr", "R.cache", "R.methodsS3", "R.oo", "R.utils", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "remotes", "rio", "rJava", "rlang", "rlist", "rmarkdown", "rprojroot", "sandwich", "shiny", "shinydashboardPlus", "shinyFiles", "shinyjs", "shinyWidgets", "sp", "SparseM", "SQUAREM", "statmod", "stringi", "styler", "survival", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "treemap", "tseries", "TTR", "utf8", "V8", "vctrs", "viridis", "viridisLite", "withr", "writexl", "xfun", "XLConnect", "xlsx", "xts", "zip", "zoo"))
shiny::runApp()
library(shinyWidgets)
install.packages("shinyWidgets")
library(shinyWidgets)
install.packages(c("broom", "cachem", "cli", "colorspace", "curl", "dplyr", "e1071", "fansi", "forecast", "ggplot2", "haven", "hdf5r", "htmltools", "httpuv", "imp4p", "isoband", "jpeg", "later", "lme4", "maptools", "matrixStats", "mime", "mvtnorm", "openssl", "openxlsx", "proxy", "quantreg", "Rcpp", "RcppArmadillo", "readr", "stringi", "survival", "testthat", "tibble", "tinytex", "tzdb", "utf8", "vroom", "xfun", "XLConnect", "zip"))
